---
description:
globs:
alwaysApply: true
---
---
description: BEER-Server refactor playbook
alwaysApply: false
globs: ["**/*"]     # lint every file – o4-mini will scope edits via files: keys
---

```yaml
# ---------------------------------------------------------
# BEER-SERVER REFACTOR – SINGLE-FILE TASK LIST FOR CURSOR o4-mini
# -------------------------------------------------
#
# ---------------------------------------------------------------------------
meta:
  project: beer-server
  author: STEVE
  date: 2025-05-17
  description: >
    Drive the codebase to full RULES.md compliance, finish Tier-4 crypto,
    and prune legacy files.

prelude:
  - Read [RULES.md](mdc:RULES.md) and [final_roadmap.md](mdc:final_roadmap.md) before each task
  - If something is vague, ambiguous, or its implementation conflicts with something else, you must raise it with me and we adjust the relevant documentation to bring all conflicts into alignment.
  - Remember that ultimately, we aim to finish the project described in [BEER_Project_Transcription.md](mdc:BEER_Project_Transcription.md) to a HD (High Distinction Standard) and everything we do must be in service of this.

# ---------------------------------------------------------------------------
# TASKS
# ---------------------------------------------------------------------------
tasks:

# G-1 ────────────────────────────────────────────────────────────────────────
  - id: G-1
    title: "Fix winner/loser re-queue order"
    files: ["src/beer/server.py", "tests/test_queue.py"]
    steps:
      - In `_monitor_session()`:
        - Change `lobby.append(winner)` → `lobby.insert(0, winner)`.
        - Re-queue loser **only if**
          `sess.win_reason not in {"timeout","concession"}`.
      - Add pytest `tests/test_queue.py`:
        1. Run two matches back-to-back.
        2. Assert winner socket/token equals `lobby[0]`.
        3. Assert loser (if re-queued) is at `lobby[-1]`.

# G-2 ────────────────────────────────────────────────────────────────────────
  - id: G-2
    title: "Token-collision safeguard"
    files: ["src/beer/reconnect_controller.py",
            "tests/test_token_collision.py"]
    steps:
      - In `attach_player(token, sock)`:
        - If slot already holds a live socket:
            ```python
            io_utils.send(sock.makefile("w"), seq,
                          msg="ERR token-in-use")
            sock.close()
            return False
            ```
      - Unit-test: open second connection with same TOKEN →
        expect `ERR token-in-use` then `False`.

# G-3 ────────────────────────────────────────────────────────────────────────
  - id: G-3
    title: "Flush buffered TOKEN line"
    files: ["src/beer/reconnect_controller.py"]
    steps:
      - After storing `new_sock`, discard the already-read handshake line:
        `new_sock.makefile("r").readline()`.

# G-4 ────────────────────────────────────────────────────────────────────────
  - id: G-4
    title: "Handle simultaneous disconnects"
    files: ["src/beer/session.py", "tests/test_double_drop.py"]
    steps:
      - In pre-turn poll:
        - Build list `dropped = [idx for idx,line in ... if line==""]`.
        - For each `slot in dropped: recon.wait(slot)` **before** `_conclude()`.
      - Test: close both sockets → match ends `abandoned`.

# G-5 ────────────────────────────────────────────────────────────────────────
  - id: G-5
    title: "Cascade spectator promotion"
    files: ["src/beer/session.py",
            "src/beer/spectator_hub.py",
            "tests/test_promo_cascade.py"]
    steps:
      - Make `SpectatorHub.promote(slot, session)` return `True/False`.
      - In disconnect branch:
        ```python
        while not self.spec.promote(slot, self):
            if self.spec.empty():
                drop_and_deregister(slot, "timeout")
                break
        ```
      - Test: first promoted spectator drops → second fills; game continues.

# G-6 ────────────────────────────────────────────────────────────────────────
  - id: G-6
    title: "Reset wizard timeout per ship"
    files: ["src/beer/placement_wizard.py"]
    steps:
      - Inside per-ship loop:
        ```python
        deadline = time.time() + TURN_TIMEOUT
        while True:
            remaining = deadline - time.time()
            if remaining <= 0: raise PlacementTimeout
            ...
        ```
      - Remove global socket timeout.

# G-7 ────────────────────────────────────────────────────────────────────────
  - id: G-7
    title: "Central drop_and_deregister() helper"
    files: ["src/beer/session.py"]
    steps:
      - Implement helper: close socket, pop token, call `_conclude`.
      - Replace duplicated logic in placement timeout, turn timeout, `QUIT`.

# G-8 ────────────────────────────────────────────────────────────────────────
  - id: G-8
    title: "Spectator command guard"
    files: ["src/beer/io_utils.py",
            "tests/test_spec_err.py"]
    steps:
      - In `recv_turn()`:
        ```python
        if spectator_hub.is_spectator(file):
            io_send(w, msg="ERR Spectators cannot issue commands")
            continue
        ```
      - Test: spectator sends `FIRE A1` → receives specific ERR.

# G-9 ────────────────────────────────────────────────────────────────────────
  - id: G-9
    title: "Skip re-queue for dead winner socket"
    files: ["src/beer/server.py"]
    steps:
      - In `_monitor_session()`:
        ```python
        if winner_sock.fileno() == -1:
            winner_queue = False
        ```
      - Only insert when `winner_queue is True`.

# G-10 ───────────────────────────────────────────────────────────────────────
  - id: G-10
    title: "Enable AES-CTR / optional HMAC"
    files: ["src/beer/framing.py", "src/beer/server.py",
            "src/beer/common.py", "tests/test_crypto.py"]
    steps:
      - Move CRC pack/unpack to `framing.py`.
      - Add AES-CTR encrypt/decrypt; wrap CRC on cipher-text.
      - Add optional HMAC-SHA256 tag.
      - `server.py`: env `BEER_ENCRYPT=1` enables `framing.enable_encryption(KEY)`.
      - Test: encrypted packet round-trip passes CRC & HMAC.

# ---------------------------------------------------------------------------
style:
  commit_message_convention: |
    fix(<scope>): <summary>

    * why / what
    * reference gap ID

  lint: poetry run ruff .
